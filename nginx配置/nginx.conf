# Main 位于 nginx.conf 配置文件的最高层；

#user  nobody; #进程用户
#工作进程，配合和CPU个数保持一致  表示 Nginx 启用了 2 个工作进程
worker_processes  2;

#错误日志路径 及级别
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#Nginx服务启动的pid   指定 Nginx 主进程的 PID 文件路径。方便管理
#pid        logs/nginx.pid;


# events:主要用于定义每个 worker process 如何处理网络连接
events {
    worker_connections  1024; # 每个表示每个工作进程最多可以同时处理 1024 个连接
    multi_accept on; #  是否允许每个工作进程一次接受多个连接。
}


# http:全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。
http {
    # 引入全局配置项

    include       mime.types;  # 引入 MIME 类型定义文件。
    default_type  application/octet-stream;  # 定义默认的 MIME 类型。 浏览器直接下载
	
    sendfile 	on;  #启用高效文件传输机制
    keepalive_timeout 65;  # 连接的超时时间的指令  如果在这个时间内没有新的请求到达，则连接将被关闭。 65秒没有新的请求就关闭

    # 定义日志格式。
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main; # 配置访问日志和

    #tcp_nopush     on; # 控制 TCP 数据包的发送行为。  tcp_nopush 确保数据包完整发送。  tcp_nodelay：实时发送小数据包。

	    # 作用: 开启或关闭 gzip 压缩功能，减少传输的数据量。
    gzip on;
	# 指定哪些 MIME 类型的内容会被 Nginx 压缩
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml font/ttf;
    gzip_min_length 1k;   # 只对大于 1KB 的文件进行压缩
    gzip_comp_level 6;    # 压缩级别（1-9，数字越大压缩率越高，但消耗更多 CPU）
    gzip_vary on;         # 在响应头中添加 `Vary: Accept-Encoding`，以便缓存服务器正确处理压缩内容
    gzip_buffers 6 8k;      # 缓冲区大小（16 个 8KB 缓冲区）
	
	# 虚拟主机1：监听80端口 用于处理zimeedu.cn请求
    server {
        listen       80;  # 监听端口，默认80
        server_name  zimeedu.cn www.zimeedu.cn; # 提供服务的域名或主机名

        #charset koi8-r; # 设置字符集

        #access_log  logs/host.access.log  main;

	# 根路径的静态文件处理
        location / {   
            root   html;  # 存放网站的路径
            index  index.html index.htm;  # 默认访问的首页
	    try_files $uri $uri/ /index.html;  # 尝试按顺序查找并提供文件或目录 找不到返回最后设置的
        }
	
	# API 路径的动态请求处理   /api/ 路径被单独处理，用于反向代理到后端服务。
        location ^~ /api/ {
	    sendfile off; # 禁用文件传输时的零拷贝机制
            rewrite ^/api/(.*)$ /$1 break; # rewrite 路径重写。  break 表示停止后续的 rewrite 规则处理，并直接使用重写后的 URI。
            proxy_pass http://localhost:8080; # 设置反向代理，将请求转发到另一个服务器
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html  # 重定向 比如错误请求 全部重定向到主页面
        
        error_page   500 502 503 504  /50x.html; # 自定义错误页面。
	# 精确匹配 当请求 /50x.html 时，Nginx 会尝试从 html 目录下查找名为 50x.html 的文件
        location = /50x.html {  
            root   html; #存放网站的路径
        }

    }

    #虚拟主机2：监听443端口并为SSL加密服务
    server {

        # HTTPS的默认访问端口443。
        #     #如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动  default_server配置成默认服务器
        listen       443 ssl default_server;

        #填写证书绑定的域名。多域名配置示例：server_name example.com www.example.com doc.example.com;
        #     server_name <YOURDOMAIN>;
        server_name  zimeedu.cn www.zimeedu.cn 47.99.135.176;
	   
        #填写证书文件绝对路径
        ssl_certificate      /usr/local/nginx/cert/zimeedu.cn.pem;
        #填写证书私钥文件绝对路径
        ssl_certificate_key  /usr/local/nginx/cert/zimeedu.cn.key;
	 # 指令用于定义 SSL 会话缓存的类型和大小。 shared:SSL:1m 表示创建一个名为 SSL 的共享缓存区，大小为 1 MB。每个会话大约占用 4 KB 到 8 KB 的空间
        ssl_session_cache    shared:SSL:1m;
	# 设置 SSL 会话在缓存中的有效期。 5分钟
        ssl_session_timeout  5m;

        #自定义设置使用的TLS协议的类型以及加密套件（以下为配置示例，请您自行评估是否需要配置）
        #     #TLS协议版本越高，HTTPS通信的安全性越高，但是相较于低版本TLS协议，高版本TLS协议对浏览器的兼容性较差。
        ssl_ciphers  HIGH:!aNULL:!MD5;

        #表示优先使用服务端加密套件。默认开启
        ssl_prefer_server_ciphers  on;

        location / {
              root   html;
              index  index.html index.htm;
	      try_files $uri $uri/ /index.html;
        }

    	location ^~ /api/ {
        	rewrite ^/api/(.*)$ /$1 break;
        	proxy_pass http://localhost:8080;
    	}
    }

}
