// Vue是一款用于构建用户界面的渐进式JavaScript框架
// Vue本质：基于数据渲染出用户看的页面  即：数据驱动视图  热部署

// Vue核心包开发 局部 模块改造 || Vue 核心包+Vue插件工程化开发  整站开发


Vue核心包 声明式渲染+组件系统 局部 模块改造
  
声明式渲染:指的是Vue通过简洁的模板语法来描述应用的状态如何映射到页面上。这意味着你只需要描述数据和DOM之间的关系，Vue会自动处理更新逻辑，使得开发者可以专注于业务逻辑而不是操作DOM。
  是指通过简洁直观的方式描述数据如何映射到DOM，而不需要手动操作DOM元素。Vue通过模板语法、计算属性、以及响应式系统来实现这一点。
  声明式渲染概念在实际项目中的应用：
    -差值表达式 ({{ }})：用于将数据绑定到HTML元素中
    -ref：用于直接访问DOM元素或子组件实例，避免手动操作DOM。
    -指令（如 v-bind, v-model）：简化了属性绑定和双向数据绑定的过程。

组件系统：提供了一种组织代码的方法，使得你可以构建出既强大又易于维护的应用程序。通过组件，你可以将HTML、JS、CSS代码分层，使得代码更加清晰、模块化，并且可以灵活地复用组件。组件可以嵌套使用，形成一个树状结构，这有助于构建大型单页应用程序(SPA)。
  Vue的一个核心特性，它允许你将应用拆分为独立的、可复用的部分。每个组件可以有自己的模板(HTML)、逻辑（JavaScript）、样式（CSS），并且可以通过Props和事件与其他组件通信。
  组件系统概念在实际项目中的应用：
    -Props：父组件向子组件传递数据。 
    -将一个组件拆分为 script template style三部分


Vue 核心包+Vue插件工程化开发  整站开发

客户端路由（VueRouter）：帮助你在不重新加载页面的情况下导航到不同的视图，非常适合构建单页应用（SPA）。
  指在单页应用（SPA）中，通过改变URL来导航不同的视图，而不需要重新加载整个页面。Vue Router 是 Vue.js 官方的路由管理器，它与 Vue.js 核心深度集成，让路由管理变得非常简单和直观。
  通俗解释：想象一下你正在浏览一个网站，每次点击链接或按钮时，整个页面不会重新加载，而是只更新部分内容，这就是客户端路由的作用。Vue Router 让你可以轻松定义不同路径对应的页面内容。
  组件系统概念在实际项目中的应用：
    -定义路由：可以为不同的页面配置不同的路由路径。
    -嵌套路由：支持创建具有层次结构的路由，非常适合构建复杂的页面结构。
    -导航守卫：可以在路由切换之前执行一些逻辑，比如用户认证检查。


状态管理工具（Pinia，Vue2叫VueX）：集中管理应用中的全局状态，简化了组件间的数据共享问题。
  状态管理工具用于集中管理应用中多个组件共享的状态。Pinia 是 Vue 的新一代状态管理库，相比之前的 Vuex 更加简洁易用。状态管理工具帮助你组织和管理应用中的全局数据，避免了父子组件之间通过 props 和事件传递数据的复杂性。
  通俗解释：假设你在做一个购物车功能，当用户添加商品到购物车时，这个信息需要在多个页面展示。使用状态管理工具，你可以将购物车数据存储在一个中心位置，任何需要访问该数据的组件都可以直接从这里获取，而不需要层层传递。
  实际项目中的应用：
    -定义Store：创建一个 Store 来保存和管理应用的状态。
    -模块化管理：支持模块化设计，便于大型项目的维护。
    -插件支持：提供插件机制，允许扩展功能，如持久化存储、调试工具等。


构建工具（Vite，Vue2叫Webpack）：Vite 是一个现代化的前端构建工具，专为快速开发和高效生产构建设计。它利用浏览器原生的 ES 模块（ESM）支持，提供了极快的冷启动速度和热更新（HMR）能力。
  负责将你的源代码转换为浏览器可以运行的形式，并且通常还会优化性能，比如压缩代码、提取CSS等。Vite 是新一代的前端构建工具，相较于 Webpack 更快更轻量，特别适合现代Web开发的需求。
  通俗解释：当你编写Vue代码时，可能会使用最新的JavaScript特性或者一些预处理器（如Sass）。构建工具会将这些代码转换为兼容所有浏览器的版本，并进行优化，确保你的网站加载速度快、性能好。
  实际项目中的应用：
    快速启动：Vite 提供了极其快速的冷启动，开发过程中几乎瞬间完成编译，极大地提高了开发效率。
    生产优化：在构建生产环境版本时，自动进行代码分割、压缩、Tree Shaking 等优化操作，减少最终文件大小，提高加载速度。
    插件系统：丰富的插件生态系统，可以根据需求定制构建流程。
    Vite 的主要用法：
      -启动开发服务器：npm run dev  默认监听 http://localhost:5000（端口可配置）。 支持热模块替换（HMR），修改代码后页面即时更新，无需刷新整个页面。
      -构建生产版本：npm run build  使用 Rollup 进行打包，支持代码分割、Tree Shaking、资源压缩等优化。  输出文件默认存放在 dist/ 目录中。
      -预览生产构建结果：npm run preview  默认启动一个静态文件服务器，用于查看生产环境下的应用效果。
      -Vite 的配置文件是 vite.config.js 或 vite.config.ts，可以用来自定义构建行为。
      -插件系统 Vite 提供了丰富的插件生态系统，可以通过安装插件扩展功能。
      -Vite 自动支持处理静态资源（如图片、字体等）。将静态文件放入 public/ 目录即可直接访问： 示例：public/logo.png 可以通过 /logo.png 访问。
      -初始化项目：npm create vite@latest my-vue-app --template vue  cd my-vue-app  npm install  npm run dev
      -代码质量检查工具：发现代码中的潜在问题、格式错误或不符合团队编码规范的地方，从而提高代码质量和一致性。


Vue前端工程化：在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。统一规范 提高复用 便于维护
前端工程化方式的开发：这四个就叫前端工程化   统一规范 提高复用 便于维护管理  现在用的最多的就是Vue工程化开发
 - 模块化：将项目划分模块，单独开发维护 提高效率 将js和css等，做成一个个可复用模块
 - 组件化：将页面各个组成部分封装为一个一个组件，提高复用 我们将UI组件，css样式，js行为封装成一个个的组件，便于管理
 - 规范化：我们提供一套标准的规范的目录、接口和编码规范，所有开发人员遵循这套规范
 - 自动化：项目的构建，测试，部署全部都是自动完成



npm（Node Package Manager）是 Node.js 的默认包管理工具，用于安装、共享和分发 JavaScript 包   
Vite 使用 npm 启动是因为 npm 是 Node.js 的默认包管理工具，同时也是运行脚本的标准方式。
  基本命令格式：npm <command> [args]  <command>：要执行的命令。[args]：传递给命令的参数，可以是选项或值。

          命令	              作用	           常用参数
      npm init	              初始化项目	    -y                          -y 或 --yes：跳过交互式问题，快速生成默认的 package.json 文件
      npm install	            安装依赖	      --save, --save-dev, -g     --save（默认）：将包添加到 dependencies 中（生产环境依赖）  --save-dev 或 -D：将包添加到 devDependencies 中（开发环境依赖） --global 或 -g：全局安装包。 --no-save：安装包但不将其添加到 package.json 中。
      npm uninstall	          卸载依赖	      --save, --save-dev, -g     --save（默认）：从 dependencies 中移除依赖。  --save-dev 或 -D：从 devDependencies 中移除依赖 --global 或 -g：卸载全局安装的包
      npm update	            更新依赖	      -g                         不带参数时，更新所有依赖到最新版本（符合 package.json 中的版本范围）。  包名 指定包名更新特定依赖：  --global 或 -g：更新全局安装的包。
      npm run	                运行脚本	
      npm list	              查看已安装的包  --depth=0, -g               --depth=0：只显示顶层全局包，不显示依赖树。
      npm cache clean	        清除缓存	      --force                     --force：强制清除缓存。
      npm config set registry	设置镜像源	     淘宝镜像源npm config set registry https://registry.npmmirror.com    官方源npm config set registry https://registry.npmjs.org  查询当前源npm config get registry
      npm publish	            发布包	        --access public
      npm search <search-term> 搜索包
      npm create             
      是一个更高级的命令，用于快速生成一个完整的项目模板。它通常调用带有“create-”前缀的工具包（例如 create-vue、create-react-app 等），
      这些工具会根据预定义的模板生成一个完整的项目结构。

      当你运行 npm create vue@3.3.4 时，npm 会执行以下步骤：
        查找并安装 create-vue 包  如果本地没有安装 create-vue，npm 会临时下载并运行指定版本的 create-vue 工具。
        使用 @3.3.4 明确指定了版本号，因此会下载并使用该版本的 create-vue。  运行脚手架工具：
        create-vue 工具会根据用户的输入（例如项目名称、是否启用 TypeScript、是否需要 ESLint 等）生成一个基本的 Vue 项目结构。  n生成项目文件：
        脚手架工具会在当前目录下创建一个新的文件夹，并生成项目所需的文件和依赖。


初始化项目：-y 或 --yes：跳过交互式问题，快速生成默认的 package.json 文件
安装依赖: --save（默认）：将包添加到 dependencies 中（生产环境依赖）  --save-dev 或 -D：将包添加到 devDependencies 中（开发环境依赖） --global 或 -g：全局安装包。 --no-save：安装包但不将其添加到 package.json 中。
卸载依赖:--save（默认）：从 dependencies 中移除依赖。  --save-dev 或 -D：从 devDependencies 中移除依赖 --global 或 -g：卸载全局安装的包
更新依赖:不带参数时，更新所有依赖到最新版本（符合 package.json 中的版本范围）。  包名 指定包名更新特定依赖：  --global 或 -g：更新全局安装的包。
查看已安装的包:--depth=0：只显示顶层全局包，不显示依赖树。
清除缓存:--force：强制清除缓存。
设置镜像源:淘宝镜像源npm config set registry https://registry.npmmirror.com    官方源npm config set registry https://registry.npmjs.org  查询当前源npm config get registry

生产环境依赖（dependencies）:生产环境依赖是指在应用程序运行时需要使用的库或工具。这些依赖是项目正常运行所必需的。  在生产环境中会被打包并部署到服务器上。
开发环境依赖（devDependencies）:开发环境依赖是指在开发过程中需要使用的工具或库，但在生产环境中并不需要它们。这些依赖通常用于构建、测试或代码质量检查。
全局依赖（global dependencies）:全局依赖是指安装到系统级别的包，可以在任何项目中直接使用，而不需要单独安装到某个项目中。

脚手架可以简单地理解为一组用于快速构建项目的工具或模板。

